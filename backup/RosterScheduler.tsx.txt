"use client";

import React, { useEffect, useState } from 'react';
import { Plus, Minus, Download, Calendar, BarChart, X } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useStore } from '@/lib/store';
import { generateSchedule } from '@/lib/scheduling';
import type { Member } from '@/lib/types';

export default function RosterScheduler() {
  const { members, schedule, setSchedule, markMemberUnavailable } = useStore();
  const [expandedDate, setExpandedDate] = useState<Date | null>(null);
  const [showStats, setShowStats] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);

  useEffect(() => {
    if (members.length > 0) {
      const newSchedule = generateSchedule(members);
      setSchedule(newSchedule);
    }
  }, [members, setSchedule]);

  const toggleDateExpansion = (date: Date) => {
    setExpandedDate(expandedDate?.getTime() === date.getTime() ? null : date);
  };

  const exportSchedule = (day: { date: Date; firstService: Member[]; secondService: Member[]; thirdService: Member[]; }) => {
    const rows = [['Service', 'Members']];

    const formatMembers = (members: Member[]) => members.map(m => m.name).join(', ');

    rows.push(['First Service', formatMembers(day.firstService)]);
    rows.push(['Second Service', formatMembers(day.secondService)]);
    rows.push(['Third Service', formatMembers(day.thirdService)]);

    const csvContent = rows.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `church_roster_${day.date.toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const calculateStats = () => {
    const stats = members.reduce((acc, member) => {
      acc[member.id] = { first: 0, second: 0, third: 0, total: 0 };
      return acc;
    }, {} as Record<number, { first: number; second: number; third: number; total: number; }>);

    schedule.forEach(day => {
      day.firstService.forEach(m => {
        stats[m.id].first++;
        stats[m.id].total++;
      });
      day.secondService.forEach(m => {
        stats[m.id].second++;
        stats[m.id].total++;
      });
      day.thirdService.forEach(m => {
        stats[m.id].third++;
        stats[m.id].total++;
      });
    });

    return stats;
  };

  const MemberList = ({ members }: { members: Member[] }) => (
    <div className="flex flex-wrap gap-1">
      {members.map(member => (
        <span
          key={member.id}
          className="px-2 py-1 rounded text-sm"
          style={{ backgroundColor: member.color }}
        >
          {member.name}
        </span>
      ))}
    </div>
  );

  return (
    <Card className="w-full">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Service Schedule 2025</CardTitle>
        <div className="flex gap-2">
          <Button onClick={() => setShowStats(!showStats)}>
            <BarChart className="w-4 h-4 mr-2" />
            {showStats ? 'Hide' : 'Show'} Stats
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {showStats && (
          <div className="mb-6 p-4 bg-gray-50 rounded-lg">
            <h3 className="text-lg font-semibold mb-4">Service Distribution</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {Object.entries(calculateStats()).map(([memberId, stats]) => {
                const member = members.find(m => m.id === Number(memberId));
                if (!member) return null;
                return (
                  <div key={memberId} className="p-4 bg-white rounded-lg shadow">
                    <h4 className="font-semibold" style={{ color: member.color }}>{member.name}</h4>
                    <p>First: {stats.first}</p>
                    <p>Second: {stats.second}</p>
                    <p>Third: {stats.third}</p>
                    <p className="font-semibold">Total: {stats.total}</p>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr>
                <th className="p-2 border text-left">Date</th>
                <th className="p-2 border text-left">First Service</th>
                <th className="p-2 border text-left">Second Service</th>
                <th className="p-2 border text-left">Third Service</th>
                <th className="p-2 border text-left">Actions</th>
              </tr>
            </thead>
            <tbody>
              {schedule.map((day) => (
                <tr key={day.date.toISOString()} className="hover:bg-gray-50">
                  <td className="p-2 border">
                    {day.date.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric'
                    })}
                  </td>
                  <td className="p-2 border">
                    {expandedDate?.getTime() === day.date.getTime() ? (
                      <MemberList members={day.firstService} />
                    ) : (
                      `${day.firstService.length} members`
                    )}
                  </td>
                  <td className="p-2 border">
                    {expandedDate?.getTime() === day.date.getTime() ? (
                      <MemberList members={day.secondService} />
                    ) : (
                      `${day.secondService.length} members`
                    )}
                  </td>
                  <td className="p-2 border">
                    {expandedDate?.getTime() === day.date.getTime() ? (
                      <MemberList members={day.thirdService} />
                    ) : (
                      `${day.thirdService.length} members`
                    )}
                  </td>
                  <td className="p-2 border">
                    <div className="flex gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => toggleDateExpansion(day.date)}
                      >
                        {expandedDate?.getTime() === day.date.getTime() ? (
                          <Minus className="w-4 h-4" />
                        ) : (
                          <Plus className="w-4 h-4" />
                        )}
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => exportSchedule(day)}
                      >
                        <Download className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setSelectedDate(day.date);
                          setShowDatePicker(true);
                        }}
                      >
                        <Calendar className="w-4 h-4" />
                      </Button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Date Picker Dialog */}
        <Dialog open={showDatePicker} onOpenChange={setShowDatePicker}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Mark Members as Unavailable</DialogTitle>
              <Button
                variant="ghost"
                size="sm"
                className="absolute right-4 top-4"
                onClick={() => setShowDatePicker(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </DialogHeader>
            {selectedDate && (
              <div className="grid gap-4 py-4">
                <p className="text-sm">
                  Select members who are unavailable on {selectedDate.toLocaleDateString()}:
                </p>
                <div className="grid gap-2">
                  {members.map((member) => {
                    const isUnavailable = member.unavailableDates.some(
                      date => date.toDateString() === selectedDate.toDateString()
                    );
                    return (
                      <label
                        key={member.id}
                        className="flex items-center space-x-2 p-2 rounded hover:bg-gray-100"
                      >
                        <input
                          type="checkbox"
                          checked={isUnavailable}
                          onChange={() => markMemberUnavailable(member.id, selectedDate)}
                          className="rounded"
                        />
                        <span style={{ color: member.color }}>{member.name}</span>
                      </label>
                    );
                  })}
                </div>
              </div>
            )}
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  );
}
