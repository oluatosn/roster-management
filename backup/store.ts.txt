"use client";

import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { Member, ServiceSchedule } from './types';

interface StoreState {
  members: Member[];
  schedule: ServiceSchedule[];
  setMembers: (members: Member[]) => void;
  addMember: (member: Omit<Member, 'id'>) => void;
  removeMember: (id: number) => void;
  updateMember: (id: number, updates: Partial<Member>) => void;
  setSchedule: (schedule: ServiceSchedule[]) => void;
  markMemberUnavailable: (memberId: number, date: Date) => void;
  resetStore: () => void; // New reset function
}

export const useStore = create<StoreState>()(
  persist(
    (set) => ({
      members: [],
      schedule: [],
      setMembers: (members) => set({ members }),
      addMember: (member) =>
        set((state) => ({
          members: [...state.members, { ...member, id: state.members.length + 1 }]
        })),
      removeMember: (id) =>
        set((state) => ({
          members: state.members.filter((m) => m.id !== id)
        })),
      updateMember: (id, updates) =>
        set((state) => ({
          members: state.members.map((m) =>
            m.id === id ? { ...m, ...updates } : m
          ),
        })),
      setSchedule: (schedule) => set({ schedule }),
      markMemberUnavailable: (memberId, date) =>
        set((state) => ({
          members: state.members.map((member) => {
            if (member.id !== memberId) return member;

            const dateIndex = member.unavailableDates.findIndex(
              (d) => d.toDateString() === date.toDateString()
            );

            const unavailableDates = [...member.unavailableDates];
            if (dateIndex === -1) {
              unavailableDates.push(date);
            } else {
              unavailableDates.splice(dateIndex, 1);
            }

            return { ...member, unavailableDates };
          }),
        })),
      resetStore: () => set({ members: [], schedule: [] }), // Reset to initial state
    }),
    {
      name: 'church-roster-storage',
    }
  )
);
